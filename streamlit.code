import streamlit as st
import pickle
import pandas as pd

# Assuming 'resale-flat-prices.csv' contains your data
data = pd.read_csv('resale-flat-prices.csv')

# Extract column names
column_names = data.columns.tolist()

def save_column_names():
    # Save column names to a file
    with open('column_names.pkl', 'wb') as f:
        pickle.dump(column_names, f)

# Call save_column_names() to save the column names before loading the model
save_column_names()

def load_model():
    # Load the trained model
    with open('model.pkl', 'rb') as file:
        loaded_model = pickle.load(file)
    
    # Load the scaler
    with open('scaler.pkl', 'rb') as f:
        loaded_scaler = pickle.load(f)

    # Load the column names
    with open('column_names.pkl', 'rb') as c:
        loaded_columns = pickle.load(c)
    
    return loaded_model, loaded_scaler, loaded_columns

# Streamlit page custom design
def streamlit_config():
    # Set page configuration
    st.set_page_config(page_title='Singapore Resale Flat Prices Predicting')

    # Custom CSS for page header background transparency
    page_background_color = """
    <style>
    [data-testid="stHeader"] {
        background: rgba(0, 0, 0, 0);
    }
    </style>
    """
    st.markdown(page_background_color, unsafe_allow_html=True)

    # Title
    st.markdown('<h1 style="text-align: center;">Singapore Resale Flat Prices Predicting</h1>',
                unsafe_allow_html=True)
    
# custom style for submit button - color and width

def style_submit_button():

    st.markdown("""
                    <style>
                    div.stButton > button:first-child {
                                                        background-color: #367F89;
                                                        color: white;
                                                        width: 70%}
                    </style>
                """, unsafe_allow_html=True)
                       
# custom style for prediction result text - color and position

def style_prediction():

    st.markdown(
            """
            <style>
            .center-text {
                text-align: center;
                color: #20CA0C
            }
            </style>
            """,
            unsafe_allow_html=True
        )
    
import datetime as dt

def handle_user_input():
    # User input options
    town_options = ['ANG MO KIO', 'BEDOK', 'BISHAN', 'BUKIT BATOK', 'BUKIT MERAH', 'BUKIT TIMAH', 'CENTRAL AREA', 'CHOA CHU KANG', 'CLEMENTI', 'GEYLANG', 'HOUGANG', 'JURONG EAST', 'JURONG WEST', 'KALLANG/WHAMPOA', 'MARINE PARADE', 'QUEENSTOWN', 'SENGKANG', 'SERANGOON', 'TAMPINES', 'TOA PAYOH', 'WOODLANDS', 'YISHUN', 'LIM CHU KANG', 'SEMBAWANG', 'BUKIT PANJANG', 'PASIR RIS', 'PUNGGOL']
    flat_type_options = ['1 ROOM', '3 ROOM', '4 ROOM', '5 ROOM', '2 ROOM', 'EXECUTIVE', 'MULTI GENERATION', 'MULTI-GENERATION']
    flat_model_options = ['IMPROVED', 'NEW GENERATION', 'MODEL A', 'STANDARD', 'SIMPLIFIED', 'MODEL A-MAISONETTE', 'APARTMENT', 'MAISONETTE', 'TERRACE', '2-ROOM', 'IMPROVED-MAISONETTE', 'MULTI GENERATION', 'PREMIUM APARTMENT', 'Improved', 'New Generation', 'Model A', 'Standard', 'Apartment', 'Simplified', 'Model A-Maisonette', 'Maisonette', 'Multi Generation', 'Adjoined flat', 'Premium Apartment', 'Terrace', 'Improved-Maisonette', 'Premium Maisonette', '2-room', 'Model A2', 'DBSS', 'Type S1', 'Type S2', 'Premium Apartment Loft', '3Gen']
    lease_commence_date = [7.58933582, 7.58882988, 7.58984151, 7.59034695, 7.59287029,7.59085212, 7.59337419, 7.59135705, 7.59186171, 7.59387784,7.58680354, 7.59236613, 7.58731051, 7.58528108, 7.58832368,7.58629631, 7.58781722, 7.58426482, 7.58578882, 7.58477308,7.59488439, 7.59438124, 7.59538728, 7.59588992, 7.59689444,7.59739632, 7.59789795, 7.5963923 , 7.59839933, 7.59890046,7.59940133, 7.59990196, 7.60040233, 7.60090246, 7.60140233,7.5837563 , 7.60190196, 7.60389797, 7.60240134, 7.60339934,7.60290046, 7.60489448, 7.60439635, 7.60539236, 7.60589   ,7.60688453, 7.60638739, 7.60738143, 7.60787807, 7.60837447,7.60887063, 7.60936654, 7.6098622 , 7.61035762, 7.6118424 ,7.61085279]
    
    # Get user inputs
    town = st.selectbox("Select Town", town_options)
    flat_type = st.selectbox("Select Flat Type", flat_type_options)
    flat_model = st.selectbox("Select Flat Model", flat_model_options)
    floor_area_sqm = st.slider("Floor Area (sqm)", key="floor_area_slider", min_value=31.0, max_value=307.0, value=73.0)
    lease_commence_date = st.selectbox("Select lease commence date",lease_commence_date)
    selected_date = st.date_input("Select month and year", value=pd.to_datetime('2023-12-31'), min_value=pd.to_datetime('1990-01-01'), max_value=pd.to_datetime('2023-12-31'))
        
 
    if st.button("Predict"):
        model, scaler, column_names = load_model()
        input_data = pd.DataFrame({
            'town': [town],
            'flat_type': [flat_type],
            'floor_area_sqm': [floor_area_sqm],
            'flat_model': [flat_model],
            'lease_commence_date': [lease_commence_date],
            'selected_date': [selected_date]
        })

        input_data_processed = preprocess_input(input_data)
        
        while input_data_processed.shape[1] < 23:
            input_data_processed[input_data_processed.columns[-1] + "_new"] = 0

        predicted_price = model.predict(input_data_processed)
        st.success(f"The predicted price of the flat is ${predicted_price[0]:.2f}")
        
def preprocess_input(input_data):
    # Load the columns used during model training
    _, _, loaded_columns = load_model()

    # Handle numerical columns
    numerical_cols = ['floor_area_sqm', 'lease_commence_date']
    input_data[numerical_cols] = input_data[numerical_cols].astype(float)

    # Handle categorical columns
    categorical_cols = ['town', 'flat_type', 'flat_model']
    for col in categorical_cols:
        dummies = pd.get_dummies(input_data[col], prefix=col)
        input_data = pd.concat([input_data, dummies], axis=1)

    # Drop the original categorical columns after one-hot encoding
    input_data.drop(columns=categorical_cols, inplace=True)

    # Reindex to include all columns used during model training
    input_data_processed = input_data.reindex(columns=loaded_columns, fill_value=0)

    # Ensure the order and presence of columns match the model's expectations
    missing_cols = set(loaded_columns) - set(input_data_processed.columns)
    for col in missing_cols:
        input_data_processed[col] = 0

    return input_data_processed

def main():
    streamlit_config()
    handle_user_input()

if __name__ == "__main__":
    main()

